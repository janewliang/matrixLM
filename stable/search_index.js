var documenterSearchIndex = {"docs":
[{"location":"example_ordinal_data/#Overview","page":"Example: MLM for ordinal data","title":"Overview","text":"","category":"section"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"In this example, we'll showcase the use of Matrix Linear Models (MLM) when dealing with ordinal data as predictors, specifically when the differences between sequential levels of the variable are of interest. To illustrate this, we'll create a simulated dataset where our X matrix comprises a single ordinal variable, 'catvar'. This variable ranges from 1 to 5. This simple setup will clearly demonstrate how MLM can handle ordinal data.","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"Just as a quick recap, our model formula is:","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"Y = XBZ^T+E","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"In this equation:","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"Y_n times m is the response matrix\nX_n times p is the matrix for main predictors,\nZ_m times q denote the response attributes matrix based on supervised knowledge,\nE_n times m is the error term, \nB_p times q is the matrix for main and interaction effects.","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"This model formulation concisely summarizes the interactions between various elements in the matrix linear model framework.","category":"page"},{"location":"example_ordinal_data/#Data-Generation","page":"Example: MLM for ordinal data","title":"Data Generation","text":"","category":"section"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"Our dataset is made up of a dataframe X that includes a single predictor. This predictor is ordinal data with 5 levels, distributed over n = 100 samples. Next, we define a response dataframe Y that consists of m = 250 responses.  In order to simulate the Y data, we need to construct the matrices Z, B, and E. The Z matrix imparts information about the response population, represented by the columns of Y, y_i in 1 250. This matrix is given dimensions of 250x4.","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"In accordance with this configuration, our coefficient matrix B is set to have dimensions of 4x5, aligning with the number of predictors in the design matrix X and the number of information categories in Z.","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"Lastly, we formulate the noise matrix E that accommodates the error terms. This matrix is produced as a normally distributed matrix (N 0 1), introducing a degree of variability into our simulation.","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"using MatrixLM, DataFrames, Random, Plots, StatsModels, Statistics\nRandom.seed!(1)\n\n# Dimensions of matrices \nn = 100\nm = 250\n\n# Number of groupings designed in the Z matrix\nq = 4\n\n# Generate data with 1 ordinal categorical variable.\ndfX = DataFrame(catvar=rand(1:5, n));\nlevels_catvar = sort(unique(dfX.catvar));","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"We employ the design_matrix() function to derive the predictor design matrix and apply contrast coding using the SeqDiffCoding() system. This coding system is particularly useful for testing hypotheses related to \"sequential differences\" between the levels of our ordinal predictor.","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"X_ctrst = Dict(\n             :catvar => SeqDiffCoding(levels = levels_catvar),\n           )\n           \nX = design_matrix(@mlmformula(1 + catvar), dfX, X_ctrst);\np = size(X, 2);","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"The design matrix X has p = 5 columns defined as:","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"X_names = MatrixLM.design_matrix_names(@mlmformula(1 + catvar), dfX, X_ctrst)","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"5-element Vector{String}:\n \"(Intercept)\"\n \"catvar: 2\"\n \"catvar: 3\"\n \"catvar: 4\"\n \"catvar: 5\"","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"We randomly generate a dataframe Z that provides information about whether a response y_i in 1 250, i.e., a column of Y, exhibits one of the four mutually exclusive attributes {\"A\", \"B\", \"C\", \"D\"}. To extract the design matrix of this \"column predictor,\" we use the design_matrix() function and implement contrast coding with the FullDummyCoding() system.","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"The FullDummyCoding system generates one indicator (1 or 0) column for each level, including the base level. This technique is sometimes referred to as one-hot encoding, which is widely used for categorical variables.","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"dfZ = DataFrame(attribute= rand([\"A\", \"B\", \"C\", \"D\"], m))\nZ_ctrst = Dict(\n             :attribute => StatsModels.FullDummyCoding(),\n          )\n           \nZ = design_matrix(@mlmformula(0 + attribute), dfZ, Z_ctrst);","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"The design matrix Z has q = 4 columns defined as:","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"Z_names = MatrixLM.design_matrix_names(@mlmformula(0 + attribute), dfZ, Z_ctrst)","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"4-element Vector{Any}:\n \"attribute: A\"\n \"attribute: B\"\n \"attribute: C\"\n \"attribute: D\"","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"The error matrix E is obtained as follows:","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"E = randn(n,m).*4;","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"We intentionally structure the coefficient matrix B according to a distinct pattern. By doing so, we enable a more straightforward visualization and interpretation of the results in the following steps:","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"# (p,q)\nB = [\n    20.0  10.0 15.0 12.0;\n    0.01  7.0  0.05 0.01;\n    12.0  0.1  0.05 0.5;\n    0.01  12.0 0.05 0.03;\n    0.07  0.0  8.5  0.04;\n];","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"Generate the response matrix Y:","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"Y = X*B*Z' + E;","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"Now, construct the RawData object consisting of the response variable Y and row/column predictors X and Z. All three matrices must be passed in as 2-dimensional arrays. You have the option to specify if X and Z include an intercept (true) or not (false). If this information is not provided, the default setting is assumed to be false (no intercept).","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"# Construct a RawData object\ndat = RawData(Response(Y), Predictors(X, Z, true, false));","category":"page"},{"location":"example_ordinal_data/#Model-estimation","page":"Example: MLM for ordinal data","title":"Model estimation","text":"","category":"section"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"Least-squares estimates for matrix linear models can be obtained by running mlm. An object of type Mlm will be returned, with variables for the coefficient estimates (B), the coefficient variance estimates (varB), and the estimated variance of the errors (sigma). By default, mlm estimates both row and column main effects (X and Z intercepts), but this behavior can be suppressed by setting addXIntercept=false and/or addZIntercept=false. Column weights for Y and the target type for variance shrinkage<sup>1</sup> can be optionally supplied to weights and targetType, respectively. ","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"est = mlm(dat; addXIntercept=false, addZIntercept=false); # Model estimation","category":"page"},{"location":"example_ordinal_data/#Model-predictions-and-residuals","page":"Example: MLM for ordinal data","title":"Model predictions and residuals","text":"","category":"section"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"The coefficient estimates can be accessed using coef(est). Predicted values and residuals can be obtained by calling predict() and resid(). By default, both of these functions use the same data used to fit the model. However, a new Predictors object can be passed into predict() as the newPredictors argument and a new RawData object can be passed into resid() as the newData argument. For convenience, fitted(est) will return the fitted values by calling predict with the default arguments.","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"esti_coef = coef(est); # Get the coefficients of the model","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"To compare the estimated coefficients with the original matrix B, we will visualize the matrices using heatmaps. This graphical representation allows us to readily see differences and similarities between the two.","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"plot(\n    heatmap(B[end:-1:1, :], \n            size = (800, 300)),     \n    heatmap(esti_coef[end:-1:1, :], \n            size = (800, 300)),     \n    title = [\"\\$ \\\\mathbf{B}\\$\" \"\\$ \\\\mathbf{\\\\hat{B}}\\$\"]\n)\n","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"(Image: svg)","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"Let's employ the same visualization method to compare the predicted values with the original Y response matrix. This allows us to gauge the accuracy of our model predictions.","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"preds = predict(est); # Prediction value","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"plot(\n    heatmap(Y[end:-1:1, :], \n            size = (800, 300)),     \n    heatmap(preds.Y[end:-1:1, :], \n            size = (800, 300), \n            # clims = (-2, 8)\n            ),     \n    title = [\"\\$ \\\\mathbf{Y}\\$\" \"\\$ \\\\mathbf{\\\\hat{Y}}\\$\"]\n)","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"(Image: svg)","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"The resid() function, available in MatrixLM.jl, provides us with the ability to compute residuals for each observation, helping you evaluate the discrepancy between the model's predictions and the actual data.","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"resids = resid(est);","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"plot(\n    heatmap(resids[end:-1:1, :], \n            size = (800, 300)),     \n    histogram(\n        (reshape(resids,250*100,1)),\n            grid  = false,\n            label = \"\",\n            size = (800, 300)),     \n    title = [\"Residuals\" \"Distribution of the residuals\"]\n)","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"(Image: svg)","category":"page"},{"location":"example_ordinal_data/#T-statistics-and-permutation-test","page":"Example: MLM for ordinal data","title":"T-statistics and permutation test","text":"","category":"section"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"The t-statistics for an Mlm object (defined as est.B ./ sqrt.(est.varB)) can be obtained by running t_stat. By default, t_stat does not return the corresponding t-statistics for any main effects that were estimated by mlm, but they will be returned if isMainEff=true.","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"tStats = t_stat(est);","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"Permutation p-values for the t-statistics can be computed by the mlm_perms function. mlm_perms calls the more general function perm_pvals and will run the permutations in parallel when possible. The illustrative example below only runs 5 permutations, but a different number can be specified as the second argument. By default, the function used to permute Y is shuffle_rows, which shuffles the rows for Y. Alternative functions for permuting Y, such as shuffle_cols, can be passed into the argument permFun. mlm_perms calls mlm and t_stat , so the user is free to specify keyword arguments for mlm or t_stat; by default, mlm_perms will call both functions using their default behavior.","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"nPerms = 500\ntStats, pVals = mlm_perms(dat, nPerms, addXIntercept=false, addZIntercept=false);","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"plot(\n    heatmap(tStats[end:-1:1, :],\n            c = :bluesreds,\n            clims = (-400, 400),\n            xticks = (1:4, Z_names),\n            xrotation = 45,\n            yticks = (collect(5:-1:1), X_names),\n            bottom_margin = (10, :mm),\n            size = (800, 300)),  \n    heatmap(-log.(pVals[end:-1:1, :]),\n            grid = false,\n            xticks = (1:4, Z_names),\n            xrotation = 45,                            \n            yticks = (collect(5:-1:1), X_names),\n            bottom_margin = (10, :mm),\n            size = (800, 300)),       \n    title = [\"T Statistics\" \"- Log(P-values)\"]\n)","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"(Image: svg)","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"In this example, our interpretation of the results can be as follows: ","category":"page"},{"location":"example_ordinal_data/","page":"Example: MLM for ordinal data","title":"Example: MLM for ordinal data","text":"the responses y_i in 1 250 that exhibit the \"A\" attribute in Z show significant differences between level 3 and level 2 of the predictor catvar in X.\nthe responses y_i in 1 250 that exhibit the \"B\" attribute in Z show significant differences between level 4 and level 3, as well as between level 2 and level 1 of the predictor catvar in X.\nthe responses y_i in 1 250 that exhibit the \"C\" attribute in Z show significant differences between level 5 and level 4 of the predictor catvar in X.","category":"page"},{"location":"functions/#Index","page":"Types and Functions","title":"Index","text":"","category":"section"},{"location":"functions/","page":"Types and Functions","title":"Types and Functions","text":"","category":"page"},{"location":"functions/#Description","page":"Types and Functions","title":"Description","text":"","category":"section"},{"location":"functions/","page":"Types and Functions","title":"Types and Functions","text":"Modules = [MatrixLM]","category":"page"},{"location":"functions/#MatrixLM.Mlm","page":"Types and Functions","title":"MatrixLM.Mlm","text":"Mlm(B::Array{Float64,2}, varB::Array{Float64,2}, sigma::Array{Float64,2},    \n    data::RawData, weights, targetType, lambda::Float64)\n\nType for storing the results of an mlm model fit. \n\n\n\n\n\n","category":"type"},{"location":"functions/#MatrixLM.Predictors","page":"Types and Functions","title":"MatrixLM.Predictors","text":"Predictors(X::AbstractArray{Float64,2}, Z::AbstractArray{Float64,2},\n           hasXIntercept::Bool, hasZIntercept::Bool)\n\nType for storing predictor (covariate) matrices. Also stores boolean  variables hasXIntercept and hasZIntercept (if they are not supplied, they  default to false). \n\n\n\n\n\n","category":"type"},{"location":"functions/#MatrixLM.RawData","page":"Types and Functions","title":"MatrixLM.RawData","text":"RawData(response::Response, predictors::Predictors)\n\nType for storing response and predictor matrices\n\nAlso stores dimensions of matrices as n, m, p, and q. \n\nn : number of rows of X = number of rows of Y\nm : number of rows of Z = number of columns of Y\np : number of columns of X\nq : number of columns of Z\n\nThe constructor will compute n, m, p, and q based on the response and  predictor matrices and assert that they are consistent. \n\n\n\n\n\n","category":"type"},{"location":"functions/#MatrixLM.Response","page":"Types and Functions","title":"MatrixLM.Response","text":"Response(Y::AbstractArray{Float64,2})\n\nType for storing response matrix\n\n\n\n\n\n","category":"type"},{"location":"functions/#MatrixLM.add_intercept-Tuple{AbstractMatrix{Float64}}","page":"Types and Functions","title":"MatrixLM.add_intercept","text":"add_intercept(A::AbstractArray{Float64,2})\n\nInsert an intercept column (column of ones) at the beginning of a 2d array. \n\nArguments\n\nA::AbstractArray{Float64,2}: 2d array of floats\n\nValue\n\nReturns A with an intercept column\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.calc_coeffs-NTuple{5, AbstractMatrix{Float64}}","page":"Types and Functions","title":"MatrixLM.calc_coeffs","text":"calc_coeffs(X::AbstractArray{Float64,2}, Y::AbstractArray{Float64,2}, \n            Z::AbstractArray{Float64,2}, XTX::AbstractArray{Float64,2}, \n            ZTZ::AbstractArray{Float64,2})\n\nCalculates the the coefficient estimates\n\nArguments\n\nX::AbstractArray{Float64,2}: The row covariates, with all  categorical variables coded in appropriate contrasts\nY::AbstractArray{Float64,2}: The multivariate response\nZ::AbstractArray{Float64,2}: The column covariates, with all categorical variables coded in appropriate contrasts\nXTX::AbstractArray{Float64,2}: X*transpose(X) product as a 2d array of floats \nZTZ::AbstractArray{Float64,2}: Z*transpose(Z) product as a 2d array of floats \n\nValue\n\n2d array of floats\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.calc_preds!-NTuple{4, AbstractMatrix{Float64}}","page":"Types and Functions","title":"MatrixLM.calc_preds!","text":"calc_preds!(preds::AbstractArray{Float64,2}, \n            X::AbstractArray{Float64,2}, \n            Z::AbstractArray{Float64,2}, \n            B::AbstractArray{Float64,2})\n\nPredict values in place\n\nArguments\n\npreds::AbstractArray{Float64,2}: The predicted values, to be  updated in place\nX::AbstractArray{Float64,2}: The row covariates, standardized as  necessary\nZ::AbstractArray{Float64,2}: The column covariates, standardized  as necessary\nB::AbstractArray{Float64,2}: Coefficient estimates\n\nValue\n\nNone; updates predicted values in place. \n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.calc_preds-Tuple{AbstractMatrix{Float64}, AbstractMatrix{Float64}, AbstractMatrix{Float64}}","page":"Types and Functions","title":"MatrixLM.calc_preds","text":"calc_preds(X::AbstractArray{Float64,2}, \n           Z::AbstractArray{Float64,2}, \n           B::AbstractArray{Float64,2})\n\nPredict values\n\nArguments\n\nX::AbstractArray{Float64,2}: The row covariates, standardized as  necessary\nZ::AbstractArray{Float64,2}: The column covariates, standardized  as necessary\nB::AbstractArray{Float64,2}: Coefficient estimates\n\nValue\n\n2d array of floats\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.calc_resid!-NTuple{5, AbstractMatrix{Float64}}","page":"Types and Functions","title":"MatrixLM.calc_resid!","text":"calc_resid!(resid::AbstractArray{Float64,2}, \n                 X::AbstractArray{Float64,2}, \n                 Y::AbstractArray{Float64,2}, \n                 Z::AbstractArray{Float64,2}, \n                 B::AbstractArray{Float64,2})\n\nCalculate residuals in place\n\nArguments\n\nresid: 2d array of floats consisting of the residuals, to be updated in  place\nX: 2d array of floats consisting of the row covariates, standardized as  necessary\nY: 2d array of floats consisting of the multivariate response  observations, standardized as necessary\nZ: 2d array of floats consisting of the column covariates, standardized  as necessary\nB: 2d array of floats consisting of coefficient estimates\n\nValue\n\nNone; updates residuals in place. \n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.calc_resid-NTuple{4, AbstractMatrix{Float64}}","page":"Types and Functions","title":"MatrixLM.calc_resid","text":"calc_resid(X::AbstractArray{Float64,2}, Y::AbstractArray{Float64,2}, \n       Z::AbstractArray{Float64,2}, B::AbstractArray{Float64,2})\n\nCalculate residuals\n\nArguments\n\nX::AbstractArray{Float64,2}: The row covariates, standardized as  necessary\nY::AbstractArray{Float64,2}: The multivariate response observations, standardized as necessary\nZ::AbstractArray{Float64,2}: The column covariates, standardized as necessary\nB::AbstractArray{Float64,2}: The coefficient estimates\n\nValue\n\n2d array of floats\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.calc_sigma-Tuple{AbstractMatrix{Float64}, AbstractString}","page":"Types and Functions","title":"MatrixLM.calc_sigma","text":"calc_sigma(resid::AbstractArray{Float64,2}, targetType::AbstractString)\n\nEstimates variance of errors and the shrinkage coefficient, with variance  shrinkage. \n\nArguments\n\nresid::AbstractArray{Float64,2}: 2d array of floats consisting of the residuals\ntargetType::AbstractString: Indicating the target type toward which to shrink the  variance. Acceptable inputs are \"A\", \"B\", \"C\", and \"D\". \n\"A\": Target is identity matrix\n\"B\": Target is diagonal matrix with constant diagonal\n\"C\": Target is has same diagonal element, and same off-diagonal element\n\"D\": Target is diagonal matrix with unequal entries\n\nValue\n\nTuple\n\nsigma: 2d array of floats; shrunk estimated variance of errors\nlambda: floating scalar; estimated shrinkage coefficient  (0 = no shrinkage, 1 = complete shrinkage)\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.calc_sigma-Tuple{AbstractMatrix{Float64}, Nothing}","page":"Types and Functions","title":"MatrixLM.calc_sigma","text":"calc_sigma(resid::AbstractArray{Float64,2}, targetType::Nothing)\n\nEstimates variance of errors and the shrinkage coefficient, without variance  shrinkage. \n\nArguments\n\nresid::AbstractArray{Float64,2}: 2d array of floats consisting of the residuals\ntargetType : nothing\n\nValue\n\nTuple\n\nsigma: 2d array of floats; estimated variance of errors\nlambda: 0.0\n\nSome notes\n\nSince this version of calc_sigma does not implement variance shrinkage, the  shrinkage coefficient lambda is 0. \n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.calc_var-NTuple{5, AbstractMatrix{Float64}}","page":"Types and Functions","title":"MatrixLM.calc_var","text":"calc_var(X::AbstractArray{Float64,2}, Z::AbstractArray{Float64,2},\n         XTX::AbstractArray{Float64,2}, ZTZ::AbstractArray{Float64,2}, \n         sigma::AbstractArray{Float64,2})\n\nCalculate the variance (diagonal of the covariance matrix) of the coefficient  estimates. \n\nArguments\n\nX::AbstractArray{Float64,2}: The row covariates, with all  categorical variables coded in appropriate contrasts\nZ::AbstractArray{Float64,2}: The column covariates, with all  categorical variables coded in appropriate contrasts\nXTX::AbstractArray{Float64,2}: X*transpose(X) product as a 2d array of floats \nZTZ::AbstractArray{Float64,2}: Z*transpose(Z) product as a 2d array of floats \nsigma::AbstractArray{Float64,2}: 2d array of floats consisting of the estimated sigma\n\nValue\n\n2d array of floats\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.center-Tuple{AbstractMatrix{Float64}}","page":"Types and Functions","title":"MatrixLM.center","text":"center(A::AbstractArray{Float64,2})\n\nCenters columns of a 2d array\n\nArguments\n\nA::AbstractArray{Float64,2}: 2d array of floats\n\nValue\n\n2d array of floats\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.coef-Tuple{Mlm}","page":"Types and Functions","title":"MatrixLM.coef","text":"coef(MLM::Mlm)\n\nExtracts coefficients from Mlm object\n\nArguments\n\nMLM::Mlm: Mlm object\n\nValue\n\n2d array of floats\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.contr","page":"Types and Functions","title":"MatrixLM.contr","text":"contr(df::DataFrames.DataFrame, cVars::AbstractArray{Symbol,1}, \n      cTypes::AbstractArray{String,1}=repeat([\"treat\"], inner=length(cVars)), \n      trtRefs::AbstractArray= repeat([nothing], inner=length(cVars)))\n\nConverts categorical variables in a DataFrame to specified contrast types.  All other variables are left as-is. \n\nArguments\n\ndf::DataFrames.DataFrame: DataFrame of variables\ncVar::Symbol: symbol for the categorical variable in df to be converted\ncTypes::AbstractArray{String,1}: 1d array of character strings of the same length as cVars,  indicating the types of contrasts to use. Defaults to treatment contrasts  (\"treat\") for all variables in cVars. Other options include \"sum\" for sum  contrasts, \"noint\" for treatment contrasts with no intercept, and  \"sumnoint\" for sum contrasts with no intercept. For \"treat\" cTypes, you  can also specify the level to use as the reference treatment using trtRefs. \ntrtRefs::AbstractArray: optional 1d array of character strings of the same length as  cVars, specifying the level to use as the references for treatment  contrasts. Defaults to nothing for all variables in cVars.\n\nValue\n\nDataFrame with same variables as the original DataFrame, but categorical  variables converted to dummy contrasts. \n\nSome notes\n\nIf cVars consists of only an empty Symbol, i.e. cVars=[Symbol()], this  will signal to the function that no contrasts should be created. The  original DataFrame will be returned. \n\n\n\n\n\n","category":"function"},{"location":"functions/#MatrixLM.cov_est-Tuple{AbstractMatrix{Float64}}","page":"Types and Functions","title":"MatrixLM.cov_est","text":"cov_est(resid::AbstractArray{Float64,2})\n\nEstimates error variance and its variance/covariance\n\nArguments\n\nresid::AbstractArray{Float64,2}: 2d array of floats consisting of the residuals\n\nValue\n\nTuple\n\nest: 2d array of floats; estimate\nvarest: 2d array of floats; variance/covariance estimate\n\n2d array of floats\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.design_matrix-Tuple{Any, DataFrames.DataFrame, Dict}","page":"Types and Functions","title":"MatrixLM.design_matrix","text":"design_matrix(frml, df::DataFrame,cntrst::Dict{Symbol, AbstractContrasts})\n\nReturns the design matrix based on the formula terms and the data source.\n\n# Arguments \n\n- `frml`: formula terms generated by the macro `@mlmformula`\n- `df`: dataframe containing the data source table\n- `cntrst`: dictionnary describing encoding method for categorical or ordinal variables, based on `StatsModels.jl`\n\n\n\ndesign_matrix(frml, df::DataFrame, cntrst::Vector)\n\nReturns the design matrix based on the formula terms and the data source.\n\n# Arguments \n\n- `frml`: formula terms generated by the macro `@mlmformula`\n- `df`: dataframe containing the data source table\n- `cntrst`: A vector containing tuples of variable names and corresponding  encoding function.\n\n\n\ndesign_matrix(frml, df::DataFrame)\n\nReturns the default design matrix based on the formula terms and the data source, where\nall the categorical variables are dummy coded.\n\n# Arguments \n\n- `frml`: formula terms generated by the macro `@mlmformula`\n- `df`: dataframe containing the data source table\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.design_matrix_names-Tuple{Any, DataFrames.DataFrame, Dict}","page":"Types and Functions","title":"MatrixLM.design_matrix_names","text":"design_matrix_names(frml, df,cntrst::Dict{Symbol, AbstractContrasts})\n\nReturns the columns names of the design matrix based on the formula terms and the data source.\n\n# Arguments \n\n- `frml`: formula terms generated by the macro `@mlmformula`\n- `df`: dataframe containing the data source table\n- `cntrst`: dictionnary describing encoding method for categorical or ordinal variables, based on `StatsModels.jl`\n\n\n\ndesign_matrix_names(frml, df::DataFrame, cntrst::Vector)\n\nReturns the design matrix based on the formula terms and the data source.\n\n# Arguments \n\n- `frml`: formula terms generated by the macro `@mlmformula`\n- `df`: dataframe containing the data source table\n- `cntrst`: A vector containing tuples of variable names and corresponding  encoding function.\n\n\n\ndesign_matrix_names(frml, df::DataFrame)\n\nReturns the columns names of the design matrix based on the formula terms and the data source, where\nall the categorical variables are dummy coded.\n\n# Arguments \n\n- `frml`: formula terms generated by the macro `@mlmformula`\n- `df`: dataframe containing the data source table\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.diagonal-Tuple{AbstractMatrix{Float64}}","page":"Types and Functions","title":"MatrixLM.diagonal","text":"diagonal(A::AbstractArray{Float64,2})\n\nGet the diagonal of a 2d array of floats. This just calls the base diag  function.\n\nArguments\n\nA::AbstractArray{Float64,2}: 2d array of floats\n\nValue\n\n1d array of floats\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.diagonal-Tuple{AbstractVector{Float64}}","page":"Types and Functions","title":"MatrixLM.diagonal","text":"diagonal(A::AbstractArray{Float64,1})\n\nGet the diagonal of a 1d array of floats. Behaves like an identity function  (returns itself). \n\nArguments\n\nA::AbstractArray{Float64,1}: 1d array of floats\n\nValue\n\n1d array of floats \n\nSome notes\n\nOriginally intended for use when A is a 1 by 1 array, so may have unintended  consequences for a 1d array of length > 1. \n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.diagonal-Tuple{Float64}","page":"Types and Functions","title":"MatrixLM.diagonal","text":"diagonal(A::Float64)\n\nGet the diagonal of a single scalar (float) value. Behaves like an identity  function (returns itself). \n\nArguments\n\nA::Float64: floating scalar\n\nValue\n\nFloating scalar\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.fitted-Tuple{Mlm}","page":"Types and Functions","title":"MatrixLM.fitted","text":"fitted(MLM::Mlm)\n\nCalculate fitted values of an Mlm object\n\nArguments\n\nMLM::Mlm: Mlm object\n\nValue\n\nResponse object\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.get_X-Tuple{RawData}","page":"Types and Functions","title":"MatrixLM.get_X","text":"get_X(data::RawData)\n\nExtract X matrix from RawData object \n\nArguments\n\ndata::RawData: RawData object\n\nValue\n\n2d array\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.get_Y-Tuple{RawData}","page":"Types and Functions","title":"MatrixLM.get_Y","text":"get_Y(data::RawData)\n\nExtract Y matrix from RawData object\n\nArguments\n\ndata::RawData: RawData object\n\nValue\n\n2d array\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.get_Z-Tuple{RawData}","page":"Types and Functions","title":"MatrixLM.get_Z","text":"get_Z(data::RawData)\n\nExtract Z matrix from RawData object\n\nArguments\n\ndata::RawData: RawData object\n\nValue\n\n2d array\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.get_dummy-Tuple{DataFrames.DataFrame, Symbol, String, Nothing}","page":"Types and Functions","title":"MatrixLM.get_dummy","text":"get_dummy(df::DataFrames.DataFrame, cVar::Symbol, \n          cType::String, trtRef::Nothing)\n\nConvert categorical variable to dummy indicators using specified contrast  type. This covers all cases except for treatment contrasts with a specified  reference level. \n\nArguments\n\ndf::DataFrames.DataFrame: DataFrame of variables\ncVar::Symbol: symbol for the categorical variable in df to be converted\ncType::String: character string indicating the type of contrast to use for cVar\ntrtRef::Nothing: nothing\n\nValue\n\nDataFrame of dummy variables for the specified categorical variable\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.get_dummy-Tuple{DataFrames.DataFrame, Symbol, String, String}","page":"Types and Functions","title":"MatrixLM.get_dummy","text":"get_dummy(df::DataFrames.DataFrame, cVar::Symbol, \n          cType::String, trtRef::String)\n\nConvert categorical variables to for treatment contrasts with a specified  reference level. \n\nArguments\n\ndf::DataFrames.DataFrame: DataFrame of variables\ncVar::Symbol: symbol for the categorical variable in df to be converted\ncType::String: character string indicating the type of contrast to use for cVar\ntrtRef::String: character string specifying the level in cVar to use as the reference \n\nValue\n\nDataFrame of dummy variables for the specified categorical variable\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.kron_diag-Tuple{Any, Any}","page":"Types and Functions","title":"MatrixLM.kron_diag","text":"kron_diag(A, B)\n\nCompute the diagonal of the Kronecker product of arrays or scalars\n\nArguments\n\nA: square 2d array of floats, a 1d array of floats, or a scalar\nB: square 2d array of floats, a 1d array of floats, or a scalar\n\nValue\n\n2d array of floats\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.mlm-Tuple{RawData}","page":"Types and Functions","title":"MatrixLM.mlm","text":"mlm(data::RawData; addXIntercept::Bool=true, addZIntercept::Bool=true, weights=nothing, targetType=nothing)\n\nMatrix linear model using least squares method. Column weighted least squares  and shrinkage of the variance of the errors are options. \n\nArguments\n\ndata::RawData: RawData object\n\nKeyword arguments\n\naddXIntercept::Bool : boolean flag indicating whether or not to include an X  intercept (row main effects). Defaults to true. \naddZIntercept::Bool : boolean flag indicating whether or not to include a Z  intercept (column main effects). Defaults to true. \nweights : 1d array of floats to use as column weights for Y, or nothing.  If the former, must be the same length as the number of columns of Y.  Defaults to nothing. \ntargetType : string indicating the target type toward which to shrink the  error variance, or nothing. If the former, acceptable inputs are \"A\", \"B\",  \"C\", and \"D\". Defaults to nothing. \n\"A\": Target is identity matrix\n\"B\": Target is diagonal matrix with constant diagonal\n\"C\": Target is has same diagonal element, and same off-diagonal element\n\"D\": Target is diagonal matrix with unequal entries\n\nValue\n\nAn Mlm object\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.mlm_fit-Tuple{RawData, Nothing, Any}","page":"Types and Functions","title":"MatrixLM.mlm_fit","text":"mlm_fit(data::RawData, weights::Nothing, targetType)\n\nMatrix linear model using least squares method. Optionally incorporates  shrinkage of the variance of the errors. \n\nArguments\n\ndata::RawData: RawData object\nweights::Nothing: nothing\ntargetType: string indicating the target type toward which to shrink the  error variance, or nothing. If the former, acceptable inputs are \"A\", \"B\",  \"C\", and \"D\". \n\"A\": Target is identity matrix\n\"B\": Target is diagonal matrix with constant diagonal\n\"C\": Target is has same diagonal element, and same off-diagonal element\n\"D\": Target is diagonal matrix with unequal entries\n\nValue\n\nAn Mlm object\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.mlm_fit-Tuple{RawData, Vector{Float64}, Any}","page":"Types and Functions","title":"MatrixLM.mlm_fit","text":"mlm_fit(data::RawData, weights::Array{Float64,1}, targetType)\n\nMatrix linear model using column weighted least squares method. Optionally  incorporates shrinkage of the variance of the errors. \n\nArguments\n\ndata::RawData : RawData object\nweights::Array{Float64,1} : 1d array of floats to use as column weights for Y. Must be the  same length as the number of columns of Y. \ntargetType : string indicating the target type toward which to shrink the  error variance, or nothing. If the former, acceptable inputs are \"A\", \"B\",  \"C\", and \"D\". \n\"A\": Target is identity matrix\n\"B\": Target is diagonal matrix with constant diagonal\n\"C\": Target is has same diagonal element, and same off-diagonal element\n\"D\": Target is diagonal matrix with unequal entries\n\nValue\n\nAn Mlm object\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.mlm_perms","page":"Types and Functions","title":"MatrixLM.mlm_perms","text":"mlm_perms(data::RawData, nPerms::Int64=1000; \n          permFun::Function=shuffle_rows, \n          addXIntercept::Bool=true, addZIntercept::Bool=true, \n          weights=nothing, targetType=nothing, isMainEff::Bool=false)\n\nObtains permutation p-values for MLM t-statistics. \n\nArguments\n\ndata::RawData: RawData object\nnPerms::Int64=1000: Number of permutations. Defaults to 1000.\n\nKeyword arguments\n\npermFun::Function: function used to permute Y. Defaults to shuffle_rows  (shuffles rows of Y). \naddXIntercept::Bool=true: Boolean flag indicating whether or not to include an X  intercept (row main effects). Defaults to true. \naddZIntercept::Bool=true: Boolean flag indicating whether or not to include a Z  intercept (column main effects). Defaults to true. \nweights: 1d array of floats to use as column weights for Y, or nothing.  If the former, must be the same length as the number of columns of Y.  Defaults to nothing. \ntargetType: string indicating the target type toward which to shrink the  error variance, or nothing. If the former, acceptable inputs are \"A\", \"B\",  \"C\", and \"D\". Defaults to nothing.\n\"A\": Target is identity matrix\n\"B\": Target is diagonal matrix with constant diagonal\n\"C\": Target is has same diagonal element, and same off-diagonal element\n\"D\": Target is diagonal matrix with unequal entries \nisMainEff::Bool: boolean flag indicating whether or not to include p-values for  the main effects\n\nValue\n\nTuple\n\ntStats: 2d array of floats; t-statistics\npvals: 2d array of floats; permutation p-values\n\nSome notes\n\nPermutations are computed in parallel when possible. \n\n\n\n\n\n","category":"function"},{"location":"functions/#MatrixLM.perm_pvals","page":"Types and Functions","title":"MatrixLM.perm_pvals","text":"perm_pvals(fun::Function, data::RawData, nPerms::Int64=1000; \n           permFun::Function=shuffle_rows, funArgs...)\n\nObtains permutation p-values. \n\nArguments\n\nfun::Function: function that returns a test statistic\ndata::RawData: RawData object\nnPerms::Int64: number of permutations. Defaults to 1000.\n\nKeyword arguments\n\npermFun::Function: function used to permute Y. Defaults to shuffle_rows  (shuffles rows of Y). \nfunArgs: variable keyword arguments to be passed into fun\n\nValue\n\nTuple\n\ntestStats: 2d array of floats; t-statistics\npvals: 2d array of floats; permutation p-values\n\nSome notes\n\nPermutations are computed in parallel when possible. \n\n\n\n\n\n","category":"function"},{"location":"functions/#MatrixLM.predict","page":"Types and Functions","title":"MatrixLM.predict","text":"predict(MLM::Mlm, newPredictors::Predictors=MLM.data.predictors)\n\nCalculates new predictions based on Mlm object\n\nArguments\n\nMLM::Mlm: Mlm object\nnewPredictors::Predictors: Predictors object. Defaults to the data.predictors field  in the Mlm object used to fit the model. \n\nValue\n\nResponse object\n\n\n\n\n\n","category":"function"},{"location":"functions/#MatrixLM.remove_intercept-Tuple{AbstractMatrix{Float64}}","page":"Types and Functions","title":"MatrixLM.remove_intercept","text":"remove_intercept(A::AbstractArray{Float64,2})\n\nRemove the intercept column, assumed to be the first column of a 2d array. \n\nArguments\n\nA::AbstractArray{Float64,2}: 2d array of floats\n\nValue\n\nReturns A without the intercept column\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.resid","page":"Types and Functions","title":"MatrixLM.resid","text":"resid(MLM::Mlm, newData::RawData=MLM.data)\n\nCalculates residuals of an Mlm object\n\nArguments\n\nMLM::Mlm: Mlm object\nnewData::RawData: RawData object. Defaults to the data field in the Mlm object  used to fit the model. \n\nValue\n\n2d array of floats\n\n\n\n\n\n","category":"function"},{"location":"functions/#MatrixLM.shrink_sigma-Tuple{AbstractMatrix{Float64}, String}","page":"Types and Functions","title":"MatrixLM.shrink_sigma","text":"shrink_sigma(resid::AbstractArray{Float64,2}, targetType::String)\n\nEstimates variance of errors and the shrinkage coefficient\n\nArguments\n\nresid::AbstractArray{Float64,2}: 2d array of floats consisting of the residuals\ntargetType::String: string indicating the target type toward which to shrink the  variance. Acceptable inputs are \"A\", \"B\", \"C\", and \"D\". \n\"A\": Target is identity matrix\n\"B\": Target is diagonal matrix with constant diagonal\n\"C\": Target is has same diagonal element, and same off-diagonal element\n\"D\": Target is diagonal matrix with unequal entries\n\nValue\n\nTuple\n\nsigma: 2d array of floats; shrunk estimated variance of errors\nlambda: floating scalar; estimated shrinkage coefficient  (0 = no shrinkage, 1 = complete shrinkage)\n\nReference\n\nLedoit, O., & Wolf, M. (2003). Improved estimation of the covariance matrix      of stock returns with an application to portfolio selection. Journal of      empirical finance, 10(5), 603-621.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.shuffle_cols-Tuple{AbstractMatrix{Float64}}","page":"Types and Functions","title":"MatrixLM.shuffle_cols","text":"shuffle_cols(A::AbstractArray{Float64,2})\n\nShuffles columns of a 2d array \n\nArguments\n\nA::AbstractArray{Float64,2}: 2d array of floats\n\nValue\n\nReturns A with columns shuffled\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.shuffle_rows-Tuple{AbstractMatrix{Float64}}","page":"Types and Functions","title":"MatrixLM.shuffle_rows","text":"shuffle_rows(A::AbstractArray{Float64,2})\n\nShuffles rows of a 2d array \n\nArguments\n\nA::AbstractArray{Float64,2}: 2d array of floats\n\nValue\n\nReturns A with rows shuffled\n\n\n\n\n\n","category":"method"},{"location":"functions/#MatrixLM.t_stat","page":"Types and Functions","title":"MatrixLM.t_stat","text":"t_stat(MLM::Mlm, isMainEff::Bool=false)\n\nCalculates t-statistics of an Mlm object\n\nArguments\n\nMLM::Mlm: Mlm object\nisMainEff::Bool : boolean flag indicating whether or not to include t-statistics  for the main effects\n\nValue\n\n2d array of floats\n\n\n\n\n\n","category":"function"},{"location":"functions/#MatrixLM.@mlmformula-Tuple{Any}","page":"Types and Functions","title":"MatrixLM.@mlmformula","text":"mlmformula(ex)\n\nCapture and parse a formula expression for matrix linear model.\n\nThe `@mlmformula` domain-specific language serves the purpose of facilitating table-to-matrix transformations.\nIt is structured to be intuitive for users who have experience with other statistical software.\nAn elementary formula in this language consists of individual terms. These terms may either be symbols that reference\ndata columns or literal numbers `0` or `1`. They are combined by the operators `+`, `&`, and `*`. \nTo ensure correct parsing of the formula, the `@mlmformula`` macro needs to be invoked within parentheses. \nThis macro is built upon the `@formula` macro from the `StatsModels.jl` package.\n\n# Example\n```julia\njulia> @mlmformula(1 + varA * VarB)\n1\nvarA(unknown)\nVarB(unknown)\nvarA(unknown) & VarB(unknown)\n```\n\n\n\n\n\n","category":"macro"},{"location":"moreExamples/#Modelling-ordinal-data","page":"Metabolomic signatures of NAFLD","title":"Modelling ordinal data","text":"","category":"section"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"For this part our X matrix has only one ordinal variable(catvar1) from 1 to 5. The encoding method for ordinal variable is SeqDiffCoding() from package StatsModels","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"using StatsModels","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"levels = unique(X_df.catvar1)\nencoding = StatsModels.ContrastsMatrix(SeqDiffCoding(), levels).matrix\nencoding_intercept = inv(hcat(ones(5,1),encoding))\nX2 = reduce(vcat,transpose.(map(x -> encoding_intercept[x,:], X_df.catvar1)))","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"p = size(X2)[2]\nn = 100\nm = 250\nq = 20","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"# Number of column covariates\nZ2 = rand(m,q)\nB2 = rand(-5:5,p,q)\nE2 = randn(n,m)\nY2 = X2*B2*transpose(Z2)+E2","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"dat2 = RawData(Response(Y2), Predictors(X2, Z2))","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"est2 = mlm(dat2)","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"heatmap(coef(est2))","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"(Image: svg)","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"heatmap(B2)","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"(Image: svg)","category":"page"},{"location":"moreExamples/#Case-study:-metabolomics-analysis","page":"Metabolomic signatures of NAFLD","title":"Case study: metabolomics analysis","text":"","category":"section"},{"location":"moreExamples/#Metabolomic-signatures-of-NAFLD","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"","category":"section"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"Reference: Study ID ST001710","category":"page"},{"location":"moreExamples/#Background","page":"Metabolomic signatures of NAFLD","title":"Background","text":"","category":"section"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"Nonalcoholic fatty liver disease (NAFLD) is a progressive liver disease that is strongly associated with type 2 diabetes.  In this demo, we will apply matrix linear models to this study.","category":"page"},{"location":"moreExamples/#Libraries","page":"Metabolomic signatures of NAFLD","title":"Libraries","text":"","category":"section"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"using LinearAlgebra,StatsModels\nusing MatrixLM\nusing CSV, DataFrames\nusing StatsBase\nusing Random\nusing Plots, FreqTables","category":"page"},{"location":"moreExamples/#Data-description","page":"Metabolomic signatures of NAFLD","title":"Data description","text":"","category":"section"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"The data was collected from workbench. After we performed data wrangling to extract the necessary information: clinical information, metabolites profiles and metabilites attributes, three data files would be involved in this Demonstration.","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"For the metabolomic data(Y), we have totally 68 different triglycerides for totally 473 subjects. ","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"For each triglyceride(Z), we have the number of carbon atom number and total double bound number.","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"For each subject(X), we have following 7 clinical variables. ","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"Variables for each subject:    ","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"-T2DM => type 2 diabetes mellitus (DummyCoding) ","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"-Kleiner_Steatosis => Stage of Non-Alcoholic Fatty Liver Disease (NAFLD)  (EffectsCoding)","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"-Inflammation => Inflammation status. (From 1 to 3)","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"-NAS => NAS score (NAFLD Activity Score) represents the sum of scores for steatosis, lobular -inflammation, and ballooning, and ranges from 0-8.   ","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"-Platelets_E10_9_per_L => platelets count (10⁹/L)   ","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"-Liver_ALT => alanine aminotransferase test (ALT) level   ","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"-Liver_AST => aspartate aminotransferase test (AST) level   ","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"-AST_ALT_Ratio => AST/ALT ratio  useful in medical diagnosis   ","category":"page"},{"location":"moreExamples/#Input-dataset","page":"Metabolomic signatures of NAFLD","title":"Input dataset","text":"","category":"section"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"# loading the data\nclinicalDF = CSV.read(\"../../data/processed/ST001710_ClinicalCovariates.csv\", DataFrame)\nmetabolitesTG = CSV.read(\"../../data/processed/MetaboTG.csv\", DataFrame)\nrefTG = CSV.read(\"../../data/processed/refTriglycerides.csv\", DataFrame);","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"print(describe(clinicalDF))","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"print(describe(refTG)) # Total carbon number and total double bound","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"freqtable(refTG.Total_DB)","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"10-element Named Vector{Int64}\nDim1  │ \n──────┼───\n0     │  9\n1     │  9\n2     │ 13\n3     │ 11\n4     │  9\n5     │  8\n6     │  6\n7     │  2\n8     │  2\n9     │  2","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"freqtable(refTG.Total_C)","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"12-element Named Vector{Int64}\nDim1  │ \n──────┼───\n45    │  1\n47    │  3\n48    │  6\n49    │  4\n50    │ 10\n51    │  5\n52    │ 12\n53    │  4\n54    │ 12\n55    │  1\n56    │ 10\n58    │  3","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"From the frequency table above, the distribution of Z is inbalanced and we need to transform them.","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"# Transformation\nrefTG2 = copy(refTG)\nrefTG2.Total_DB[findall(refTG.Total_DB.>=6)] .=6;\nrefTG2.Total_C[findall(refTG.Total_C.<=50)] .=1;\nrefTG2.Total_C[findall(refTG.Total_C.>50 .&& refTG.Total_C.<=55)] .=2;\nrefTG2.Total_C[findall(refTG.Total_C.>55)] .=3;","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"freqtable(refTG2.Total_DB)","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"7-element Named Vector{Int64}\nDim1  │ \n──────┼───\n0     │  9\n1     │  9\n2     │ 13\n3     │ 11\n4     │  9\n5     │  8\n6     │ 12","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"freqtable(refTG2.Total_C)","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"3-element Named Vector{Int64}\nDim1  │ \n──────┼───\n1     │ 24\n2     │ 34\n3     │ 13","category":"page"},{"location":"moreExamples/#Model-Decision","page":"Metabolomic signatures of NAFLD","title":"Model Decision","text":"","category":"section"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"Our first model would be simple, with only one variable(T2DM) are included into the design matrix.","category":"page"},{"location":"moreExamples/#Model:-T2DM","page":"Metabolomic signatures of NAFLD","title":"Model: T2DM","text":"","category":"section"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"# Generate X matrix\ncontrasts = Dict(:T2DM => EffectsCoding(base = \"N\"))\nfrml = @formula(0 ~  T2DM).rhs\n# mf = ModelFrame(@formula(y ~ 1 + Sex).rhs, dfInd)\nX_1 = modelmatrix(frml, clinicalDF, hints = contrasts);","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"# Generate Z matrix\ncontrasts = Dict(:Total_C => StatsModels.FullDummyCoding())\nfrml = @formula(0 ~ Total_C).rhs\n# mf = ModelFrame(@formula(y ~ 1 + Sex).rhs, dfInd)\nZ = modelmatrix(frml, refTG2, hints = contrasts);","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"# Y matrix\nY = Matrix(metabolitesTG)[:, 2:end]; # Remove first column","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"@mlmformula are similar with the @formula from the package StatsModels. The mlmformula macro takes expression like 1 + a*b to construct design matrix.","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"Operators that have special interpretations in this syntax are:","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"+ concatenates variables as columns when generating a model matrix.\n& representes an interaction between two or more variables, which corresponds to a row-wise kronecker product of the individual terms (or element-wise product if all terms involved are continuous/scalar).\n* expands to all main effects and interactions: a*b is equivalent to a+b+a&b, a*b*c to a+b+c+a&b+a&c+b&c+a&b&c, etc.\n1, 0, and -1 indicate the presence (for 1) or absence (for 0 and -1) of an intercept column.","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"dat = RawData(Response(Y), Predictors(X_1, Z, false,  false)) # Build raw data object\n# Matrix linear model estimation, we already add an intercept when building design matrix\nest = mlm(dat, addXIntercept=false, addZIntercept=false) \nesti_coef = MatrixLM.coef(est);","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"After the model estimation, we will use permutation test to calculate t statistics and p value.","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"nPerms = 5\n# confusing about specifying again intercept boolean\ntStats, pVals = mlm_perms(dat, nPerms, addXIntercept=false, addZIntercept=false);","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"znames = [\"Total_C:1\" \"Total_C:2\" \"Total_C:3\"]\nplot(permutedims(tStats)[:,1], markershape = :circle, legend = false, title = \"T-statistics of coefficient estimation\", \n    xticks = (collect(1:length(znames)), znames))","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"(Image: svg)","category":"page"},{"location":"moreExamples/","page":"Metabolomic signatures of NAFLD","title":"Metabolomic signatures of NAFLD","text":"From the model above, the triglycerides of all carbon numbers are significantly different between the people without diabeties and with diabeties.","category":"page"},{"location":"getting_started/#Overview","page":"Getting Started","title":"Overview","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"In this section, we demonstrate how to utilize MatrixLM.jl via a simple example that involves simulated data.    ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Matrix Linear Models (MLM) serve as a simple yet robust multivariate framework for encoding relationships and groupings within high-throughput data. MLM's flexibility allows it to encode both categorical and continuous relationships, thereby enhancing the detection of associations between responses and predictors.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Within the scope of the matrix linear model framework, the model is articulated as follows:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Y = XBZ^T+E","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Where ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Y_n times m is the response matrix\nX_n times p is the matrix for main predictors,\nZ_m times q denote the response attributes matrix based on a supervised knowledge,\nE_n times m is the error term, \nB_p times q is the matrix for main and interaction effects.","category":"page"},{"location":"getting_started/#Data-Generation","page":"Getting Started","title":"Data Generation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"To enhance the practibality of this example, we assume that both the responses and the predictors are presented as dataframes.  Our dataset consists of a dataframe X, which includes p = 5 predictors. Among these predictors, two are categorical variables and three are numerical, spread across n = 100 samples. We then consider a response dataframe Y composed of m = 250 responses. To simulate the Y data, we need to generate the matrices Z,B, and E.  The matrix Z provides information about the response population, which corresponds to the Y's columns y_i in 1 250. The dimensions of this matrix are set at 250x10. Given this setup, the coefficient matrix B is designed to have dimensions of 5x10. This matches the number of predictors in X and the information categories in Z. Finally, we create the noise matrix E, which contains the error terms. We generate this matrix as a normally-distributed matrix (N 0 4), adding a layer of randomness to our simulation.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using MatrixLM, DataFrames, Random, Plots, StatsModels, Statistics\nRandom.seed!(1)\n\n# Dimensions of matrices \nn = 100\nm = 250\n\n# Number of groupings designed in the Z matrix\nq = 10\n\n# Generate data with two categorical variables and 3 numerical variables.\ndfX = hcat(\n    DataFrame(catvar1=string.(rand(0:1, n)), catvar2=rand([\"A\", \"B\", \"C\", \"D\"], n)), \n    DataFrame(rand(n,3), [\"var3\", \"var4\", \"var5\"])\n    );","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Let use the function design_matrix() to get the predictor model matrix based on the formula expression including all the variables terms.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Convert dataframe to predicton matrix\nX = design_matrix(@mlmformula(catvar1 + catvar2 + var3 + var4 + var5), dfX)\n\np = size(X)[2];","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"We also have the option to specify contrast coding in your model. For a detailed understanding of how to implement contrast coding, please refer to the documentation for contrast coding with StatsModels.jl. This will provide you with comprehensive instructions and examples.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Convert dataframe to predicton matrix\nmy_ctrst = Dict(\n             :catvar1 => DummyCoding(base = \"0\"),\n             :catvar2 => DummyCoding(base = \"A\")\n           )\n           \nX = design_matrix(@mlmformula(catvar1 + catvar2 + var3 + var4 + var5), dfX, my_ctrst);","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Randomly generate some data for column covariates Z and the error matrix E:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Z = rand(m,q);\nE = randn(n,m).*4;","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Next, we will structure the coefficient matrix B following a specific pattern. This approach will facilitate a more effective visualization of the results in the subsequent steps:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# (p,q)\nB = [\n    2.0   3.0   4.0   5.0  6.0  7.0  8.0  0.0 0.5 -2.0;\n    0.01  0.02  0.01  0.09 0.18 0.03 0.14 0.0 0.5 -2.0;\n    -1.0  -0.5  0.02  0.49 1.1  2.0  5.0  0.0 0.5 -2.0;\n    -0.01 0.02  -0.01 3.0  3.0  7.0  0.14 0.0 0.5 -2.0;\n    0.0   0.0   0.0   0.0  3.0  3.0  3.0  3.0 0.5 -2.0;\n    3.0   3.0   3.0   3.0  0.08 0.03 0.0  0.0 0.5 -2.0;\n    0.01  0.0   3.0   3.0  3.0  3.0 0.04  0.0 0.5 -2.0;\n];","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Generate the response matrix Y:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Y = X*B*Z' + E;","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Now, construct the RawData object consisting of the response variable Y and row/column predictors X and Z. All three matrices must be passed in as 2-dimensional arrays.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Construct a RawData object\ndat = RawData(Response(Y), Predictors(X, Z));","category":"page"},{"location":"getting_started/#Model-estimation","page":"Getting Started","title":"Model estimation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Least-squares estimates for matrix linear models can be obtained by running mlm. An object of type Mlm will be returned, with variables for the coefficient estimates (B), the coefficient variance estimates (varB), and the estimated variance of the errors (sigma). By default, mlm estimates both row and column main effects (X and Z intercepts), but this behavior can be suppressed by setting addXIntercept=false and/or addZIntercept=false. Column weights for Y and the target type for variance shrinkage<sup>1</sup> can be optionally supplied to weights and targetType, respectively. ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"est = mlm(dat; addXIntercept=false, addZIntercept=false); # Model estimation","category":"page"},{"location":"getting_started/#Model-predictions-and-residuals","page":"Getting Started","title":"Model predictions and residuals","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The coefficient estimates can be accessed using coef(est). Predicted values and residuals can be obtained by calling predict() and resid(). By default, both of these functions use the same data used to fit the model. However, a new Predictors object can be passed into predict() as the newPredictors argument and a new RawData object can be passed into resid() as the newData argument. For convenience, fitted(est) will return the fitted values by calling predict with the default arguments.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"esti_coef = coef(est); # Get the coefficients of the model","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"To compare the estimated coefficients with the original matrix B, we will visualize the matrices using heatmaps. This graphical representation allows us to readily see differences and similarities between the two.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"plot(\n    heatmap(B[end:-1:1, :], \n            size = (800, 300)),     \n    heatmap(esti_coef[end:-1:1, :], \n            size = (800, 300), \n            clims = (-2, 8)),     \n    title = [\"\\$ \\\\mathbf{B}\\$\" \"\\$ \\\\mathbf{\\\\hat{B}}\\$\"]\n)\n","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: svg)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Let's employ the same visualization method to compare the predicted values with the original Y response matrix. This allows us to gauge the accuracy of our model predictions.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"preds = predict(est); # Prediction value","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"plot(\n    heatmap(Y[end:-1:1, :], \n            size = (800, 300)),     \n    heatmap(preds.Y[end:-1:1, :], \n            size = (800, 300), \n            # clims = (-2, 8)\n            ),     \n    title = [\"\\$ \\\\mathbf{Y}\\$\" \"\\$ \\\\mathbf{\\\\hat{Y}}\\$\"]\n)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: svg)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The resid() function, available in MatrixLM.jl, provides us with the ability to compute residuals for each observation, helping you evaluate the discrepancy between the model's predictions and the actual data.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"resids = resid(est);","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"plot(\n    heatmap(resids[end:-1:1, :], \n            size = (800, 300)),     \n    histogram(\n        (reshape(resids,250*100,1)),\n            grid  = false,\n            label = \"\",\n            size = (800, 300)),     \n    title = [\"Residuals\" \"Distribution of the residuals\"]\n)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: svg)","category":"page"},{"location":"getting_started/#T-statistics-and-permutation-test","page":"Getting Started","title":"T-statistics and permutation test","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The t-statistics for an Mlm object (defined as est.B ./ sqrt.(est.varB)) can be obtained by running t_stat. By default, t_stat does not return the corresponding t-statistics for any main effects that were estimated by mlm, but they will be returned if isMainEff=true.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"tStats = t_stat(est);","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Permutation p-values for the t-statistics can be computed by the mlm_perms function. mlm_perms calls the more general function perm_pvals and will run the permutations in parallel when possible. The illustrative example below only runs 5 permutations, but a different number can be specified as the second argument. By default, the function used to permute Y is shuffle_rows, which shuffles the rows for Y. Alternative functions for permuting Y, such as shuffle_cols, can be passed into the argument permFun. mlm_perms calls mlm and t_stat , so the user is free to specify keyword arguments for mlm or t_stat; by default, mlm_perms will call both functions using their default behavior.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"nPerms = 500\ntStats, pVals = mlm_perms(dat, nPerms);","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"plot(\n    heatmap(tStats[end:-1:1, :],\n            c = :bluesreds,\n            clims = (-40, 40),\n            size = (800, 300)),  \n    heatmap(-log.(pVals[end:-1:1, :]),\n            grid = false,    \n            size = (800, 300)),       \n    title = [\"T Statistics\" \"- Log(P-values)\"]\n)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: svg)","category":"page"},{"location":"#MatrixLM","page":"Home","title":"MatrixLM","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: CI) (Image: codecov) (Image: MIT license) (Image: Documentation) (Image: Pkg Status)","category":"page"},{"location":"#Description","page":"Home","title":"Description","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Core functions to obtain closed-form least squares estimates for matrix linear models. Variance shrinkage is adapted from Ledoit & Wolf (2003)¹.","category":"page"},{"location":"","page":"Home","title":"Home","text":"An extension of MatrixLM for applications in high-throughput genetic screens is the GeneticScreens package. See the associated paper, \"Matrix linear models for high-throughput chemical genetic screens\", and its reproducible code for more details. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"MatrixLMnet is a related package that implements algorithms for  L1-penalized estimates for matrix linear models. See the associated paper, \"Sparse matrix linear models for structured high-throughput data\", and its reproducible code for more details. ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The MatrixLM package can be installed using the Julia package manager by running: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"MatrixLM\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the most recent version, use:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url = \"https://github.com/senresearch/MatrixLM.jl\", rev=\"develop\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also install MatrixLM using the Pkg REPL mode from the Julia REPL. Enter the Pkg REPLS mode by pressing ]. Once you're in Pkg mode, type the following command and hit enter:","category":"page"},{"location":"","page":"Home","title":"Home","text":"add MatrixLM","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once the process is complete, you can exit the Pkg REPL mode by pressing backspace or ctrl+C, returning you to the standard Julia REPL.","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We appreciate contributions from users including reporting bugs, fixing issues, improving performance and adding new features.","category":"page"},{"location":"#Questions","page":"Home","title":"Questions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have questions about contributing or using MatrixLM package, please communicate with authors from github.","category":"page"},{"location":"#Citing-MatrixLM","page":"Home","title":"Citing MatrixLM","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use MatrixLM in a scientific publication, please consider citing following paper:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Jane W Liang, Robert J Nichols, Śaunak Sen, Matrix Linear Models for High-Throughput Chemical Genetic Screens, Genetics, Volume 212, Issue 4, 1 August 2019, Pages 1063–1073, https://doi.org/10.1534/genetics.119.302299","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{10.1534/genetics.119.302299,\n    author = {Liang, Jane W and Nichols, Robert J and Sen, Śaunak},\n    title = \"{Matrix Linear Models for High-Throughput Chemical Genetic Screens}\",\n    journal = {Genetics},\n    volume = {212},\n    number = {4},\n    pages = {1063-1073},\n    year = {2019},\n    month = {06},\n    issn = {1943-2631},\n    doi = {10.1534/genetics.119.302299},\n    url = {https://doi.org/10.1534/genetics.119.302299},\n    eprint = {https://academic.oup.com/genetics/article-pdf/212/4/1063/42105135/genetics1063.pdf},\n}","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"<a name=\"myfootnote1\">1</a>. Ledoit, O., & Wolf, M. (2003). Improved estimation of the covariance matrix of stock returns with an application to portfolio selection. Journal of empirical finance, 10(5), 603-621. ","category":"page"}]
}
